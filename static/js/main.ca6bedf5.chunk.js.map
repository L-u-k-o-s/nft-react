{"version":3,"sources":["logo.svg","nft.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["darova","a","sendMessage","console","log","injected","mapEthereumWallet","InjectedWeb3ConnectionProvider","walletConnect","WalletConnectConnectionProvider","bridge","clientMeta","description","url","icons","name","rpc","chainId","qrcode","qrcodeModal","open","uri","cb","opts","JSON","stringify","type","message","window","location","replace","close","connector","Connector","create","add","connection","subscribe","con","status","collection","sdk","createRaribleSdk","wallet","nft","generateTokenId","toContractAddress","minter","toUnionAddress","address","tokenId","mintRequest","collectionId","mintAndSell","mintResponse","getIPFS","submit","supply","lazyMint","price","creators","account","value","royalties","currency","response","getOptions","option","connect","obj","form","FormData","append","Blob","axios","method","data","headers","IpfsHash","App","className","src","logo","alt","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ca6bedf5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Connector, InjectedWeb3ConnectionProvider} from \"@rarible/connector\";\r\nimport {WalletConnectConnectionProvider} from \"@rarible/connector-walletconnect\";\r\nimport {mapEthereumWallet} from '@rarible/connector-helper';\r\nimport {createRaribleSdk} from '@rarible/sdk';\r\nimport {toContractAddress} from \"@rarible/types\";\r\nimport {toUnionAddress} from \"@rarible/types/build/union-address\";\r\nimport {PrepareMintRequest} from \"@rarible/sdk/build/types/nft/mint/prepare-mint-request.type\";\r\nimport axios from \"axios\";\r\nimport {ethers} from \"ethers\";\r\n\r\nconst darova = async (sendMessage: Function = () => {console.log('kek param')}) => {\r\n    console.log('darova')\r\n    const ethereumRpcMap: Record<number, string> = {\r\n        1: \"https://node-mainnet.rarible.com\",\r\n        3: \"https://node-ropsten.rarible.com\",\r\n        4: \"https://node-rinkeby.rarible.com\",\r\n        17: \"https://node-e2e.rarible.com\",\r\n    }\r\n\r\n    const injected = mapEthereumWallet(new InjectedWeb3ConnectionProvider())\r\n    const walletConnect = mapEthereumWallet(new WalletConnectConnectionProvider({\r\n\r\n        bridge: \"https://bridge.walletconnect.org\",\r\n        clientMeta: {\r\n            description: \"WalletConnect NodeJS Client\",\r\n            url: \"https://nodejs.org/en/\",\r\n            icons: [\"https://nodejs.org/static/images/logo.svg\"],\r\n            name: \"WalletConnect\",\r\n        },\r\n        rpc: {\r\n            1: \"https://node-mainnet.rarible.com\",\r\n            3: \"https://node-ropsten.rarible.com\",\r\n            4: \"https://node-rinkeby.rarible.com\",\r\n        },\r\n        chainId: 1,\r\n        qrcode: true,\r\n        qrcodeModal: {\r\n            async open(uri: string, cb: any, opts?: any) {\r\n                sendMessage(JSON.stringify({type: 'LAUNCH', message: uri}))\r\n\r\n                console.log(uri)\r\n                window.location.replace(uri);\r\n\r\n                // await cb()\r\n            },\r\n            async close() {\r\n                console.log('skdfjksdjf')\r\n                // const connection = await walletConnect.getConnection();\r\n                // const sdk = createRaribleSdk((await walletConnect.getConnection())., \"staging\");\r\n                // const isConnected = await walletConnect.isConnected()\r\n                return 'darova'\r\n            }\r\n        },\r\n        // qrcodeModalOptions: {\r\n        //     mobileLinks: ['lol']\r\n        // }\r\n\r\n    }))\r\n\r\n\r\n    const connector = Connector\r\n        .create(injected)\r\n        .add(walletConnect)\r\n\r\n\r\n    connector.connection.subscribe(async (con) => {\r\n            console.log(\"connection: \" + con.status);\r\n            if (con.status === \"connected\") {\r\n                console.log('ccccccccccccccccon')\r\n                // prod\r\n                const collection = 'ETHEREUM:0xc9154424B823b10579895cCBE442d41b9Abd96Ed';\r\n                // staging\r\n                // const collection = 'ETHEREUM:0x6ede7f3c26975aad32a475e1021d8f6f39c89d82';\r\n                // dev\r\n                // const collection = 'ETHEREUM:0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05';\r\n                // @ts-ignore\r\n                const sdk = createRaribleSdk(con.connection.wallet, \"prod\");\r\n                const tokenId = await sdk.nft.generateTokenId({\r\n                    collection: toContractAddress(collection),\r\n                    minter: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                })\r\n                // window.location.replace('https://metamask.app.link/dapp/l-u-k-o-s.github.io/nft-react/index.html');\r\n                console.log(tokenId);\r\n                const mintRequest: PrepareMintRequest = {\r\n                    collectionId: toContractAddress(collection),\r\n                    tokenId,\r\n                };\r\n                const mintResponse = await sdk.nft.mintAndSell(mintRequest);\r\n                const uri = await getIPFS(tokenId?.tokenId);\r\n                console.log(uri);\r\n                // window.location.replace('https://metamask.app.link/dapp/l-u-k-o-s.github.io/nft-react/index.html');\r\n\r\n                const response = await mintResponse.submit({\r\n                    uri,\r\n                    supply: 1,\r\n                    lazyMint: true,\r\n                    price: 1,\r\n                    creators: [\r\n                        {\r\n                            account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                            value: 10000,\r\n                        },\r\n                    ],\r\n                    royalties: [{\r\n                        account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                        value: 1000,\r\n                    }],\r\n                    currency: {\r\n                        \"@type\": \"ETH\",\r\n                    },\r\n                })\r\n\r\n                console.log(response);\r\n            }\r\n        }\r\n    )\r\n\r\n    const option = (await connector.getOptions())[0]; // get list of available option\r\n    console.log(option);\r\n    const tmp = await connector.connect(option);\r\n\r\n    console.log('dkdkjd')\r\n}\r\n\r\nconst getIPFS = async (tokenId: any) => {\r\n    const obj = {\r\n        \"name\": \"112\",\r\n        \"description\": \"123\",\r\n        \"image\": \"ipfs://ipfs/QmdFFGs19hry4NjWMgZj2XTxGFEhywRsvD41bpR68uHCCq/image.png\",\r\n        \"external_url\": `https://rarible.com/token/0xc9154424B823b10579895cCBE442d41b9Abd96Ed:${tokenId}`,\r\n        \"attributes\": []\r\n    };\r\n\r\n    const form = new FormData();\r\n\r\n    const fileName = 'test.json';\r\n\r\n    form.append('file', new Blob([JSON.stringify(obj)], {type: 'text/json'} ), fileName);\r\n\r\n\r\n    const response = await axios({\r\n        method: \"post\",\r\n        url: \"https://pinata.rarible.com/upload\",\r\n        data: form,\r\n        headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n    });\r\n    console.log(response);\r\n    console.log(2432452352345)\r\n\r\n    return `ipfs://ipfs/${response.data.IpfsHash}`\r\n\r\n}\r\n\r\n// @ts-ignore\r\nwindow.darova = darova;\r\n\r\nexport default darova;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport darova from \"./nft\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <button onClick={() => darova()}> sdkjahfkjhsdfkjhakjfhjkh</button>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}