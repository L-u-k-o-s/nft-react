{"version":3,"sources":["logo.svg","nft.ts","Web3States.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["window","addEventListener","event","data","ports","console","log","dartCommunicationPort","onmessage","getConnector","sendMessage","a","walletConnect","mapEthereumWallet","WalletConnectConnectionProvider","bridge","clientMeta","description","url","icons","name","rpc","chainId","qrcode","qrcodeModal","open","uri","cb","opts","JSON","stringify","type","message","close","qrcodeModalOptions","mobileLinks","signingMethods","Connector","create","connectWallet","connector","connection","subscribe","con","status","connect","mintAndSell","ipfsUri","price","royalty","collection","sdk","createRaribleSdk","wallet","nft","generateTokenId","toContractAddress","minter","toUnionAddress","address","tokenId","mintRequest","collectionId","mintResponse","getIPFS","parseFloat","submit","supply","lazyMint","creators","account","value","royalties","currency","link","getOptions","option","obj","image","external_url","attributes","form","FormData","append","Blob","axios","method","headers","response","IpfsHash","disconnectWallet","localStorage","setItem","onerror","errorMsg","lineNumber","stringParam","postMessage","defaultSendMessage","Web3States","props","timerID","state","web3","ethereum","web3Provider","currentProvider","setInterval","tick","this","clearInterval","setState","React","Component","App","className","src","logo","alt","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.48f71239.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Connector} from \"@rarible/connector\";\r\nimport {WalletConnectConnectionProvider} from \"@rarible/connector-walletconnect\";\r\nimport {mapEthereumWallet} from '@rarible/connector-helper';\r\nimport {createRaribleSdk} from '@rarible/sdk';\r\nimport {toContractAddress} from \"@rarible/types\";\r\nimport {toUnionAddress} from \"@rarible/types/build/union-address\";\r\nimport {PrepareMintRequest} from \"@rarible/sdk/build/types/nft/mint/prepare-mint-request.type\";\r\n\r\nimport axios from \"axios\";\r\n\r\n// listen for messages from dart\r\nwindow.addEventListener('message', function (event) {\r\n    if (event.data === 'capturePort') {\r\n        if (event.ports[0] != null) {\r\n            console.log('Port set');\r\n            // @ts-ignore\r\n            window.dartCommunicationPort = event.ports[0];\r\n            // @ts-ignore\r\n            window.dartCommunicationPort.onmessage = function (event) {\r\n                console.log(`Message from dart side ${event.data}`);\r\n            };\r\n        }\r\n    }\r\n}, false);\r\n\r\nconst defaultSendMessage = (stringParam: string) => {\r\n    // @ts-ignore\r\n    window?.dartCommunicationPort?.postMessage(stringParam);\r\n};\r\n\r\nconst getConnector = async (sendMessage: Function) => {\r\n    const walletConnect = mapEthereumWallet(new WalletConnectConnectionProvider({\r\n\r\n        bridge: \"https://bridge.walletconnect.org\",\r\n        clientMeta: {\r\n            description: \"WalletConnect NodeJS Client\",\r\n            url: \"https://nodejs.org/en/\",\r\n            icons: [\"https://nodejs.org/static/images/logo.svg\"],\r\n            name: \"WalletConnect\",\r\n        },\r\n        rpc: {\r\n            // 1: \"https://node-mainnet.rarible.com\",\r\n            1: \"https://mainnet-nethermind.blockscout.com/\",\r\n            3: \"https://node-ropsten.rarible.com\",\r\n            4: \"https://node-rinkeby.rarible.com\",\r\n            137: \"https://matic-mainnet.chainstacklabs.com\",\r\n        },\r\n        chainId: 1,\r\n        qrcode: true,\r\n        // qrcodeModal:QRCodeModal,\r\n        qrcodeModal: {\r\n            async open(uri: string, cb: any, opts?: any) {\r\n                sendMessage(JSON.stringify({type: 'LAUNCH', message: uri}))\r\n                console.log(uri)\r\n            },\r\n            async close() {\r\n                console.log('closed method was called ')\r\n                return 'darova'\r\n            }\r\n        },\r\n        qrcodeModalOptions: {mobileLinks: [\"metamask\", \"trust\"]},\r\n        signingMethods: [\r\n            'eth_signTypedData_v4',\r\n\r\n            'eth_sendTransaction',\r\n            'eth_signTransaction',\r\n            'eth_sign',\r\n            'eth_signTypedData',\r\n\r\n            'eth_signTypedData_v1',\r\n            'eth_signTypedData_v2',\r\n            'eth_signTypedData_v3',\r\n            'eth_signTypedData_v4',\r\n            'personal_sign',\r\n        ],\r\n    }))\r\n\r\n    return Connector.create(walletConnect);\r\n};\r\n\r\nconst connectWallet = async (sendMessage: Function = () => {\r\n    console.log('connectWallet default console log')\r\n}) => {\r\n    const connector = await getConnector(sendMessage);\r\n    connector.connection.subscribe(async (con) => {\r\n            console.log(\"connection: \" + con.status);\r\n            if (con.status === \"connected\") {\r\n                sendMessage(JSON.stringify({type: 'CONNECTED', message: null}))\r\n            }\r\n        }\r\n    )\r\n\r\n    await connect(connector)\r\n};\r\n\r\nconst disconnectWallet = (sendMessage: Function) => {\r\n    localStorage.setItem('walletconnect', '');\r\n    sendMessage(JSON.stringify({type: 'DISCONNECTED', message: null}))\r\n};\r\n\r\n\r\nconst mintAndSell = async (\r\n    ipfsUri: string = '',\r\n    name: string = 'Default name',\r\n    description: string = 'Default description',\r\n    price: string = '1',\r\n    royalty: string = '0',\r\n    sendMessage: Function = () => {\r\n        console.log('mintAndSell default console log')\r\n    },\r\n) => {\r\n    const connector = await getConnector(sendMessage);\r\n\r\n    connector.connection.subscribe(async (con) => {\r\n            console.log(\"connection: \" + con.status);\r\n            if (con.status === \"connected\") {\r\n                console.log('mint and sell logic started')\r\n                // prod\r\n                const collection = 'ETHEREUM:0xc9154424B823b10579895cCBE442d41b9Abd96Ed';\r\n                // staging\r\n                // const collection = 'ETHEREUM:0x6ede7f3c26975aad32a475e1021d8f6f39c89d82';\r\n                // dev\r\n                // const collection = 'ETHEREUM:0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05';\r\n                // @ts-ignore\r\n                const sdk = createRaribleSdk(con.connection.wallet, \"prod\");\r\n                const tokenId = await sdk.nft.generateTokenId({\r\n                    collection: toContractAddress(collection),\r\n                    minter: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                })\r\n                console.log(tokenId);\r\n                const mintRequest: PrepareMintRequest = {\r\n                    // @ts-ignore\r\n                    collectionId: toContractAddress(collection),\r\n                    tokenId,\r\n                };\r\n                const mintResponse = await sdk.nft.mintAndSell(mintRequest);\r\n                const uri = await getIPFS(ipfsUri, tokenId?.tokenId, name, description);\r\n                sendMessage(JSON.stringify({type: 'LOADED_TO_IPFS', message: null}))\r\n                sendMessage(JSON.stringify({type: 'LAUNCH', message: null}))\r\n                console.log(uri);\r\n                console.log(`the price is ${parseFloat(price)}`)\r\n                await mintResponse.submit({\r\n                    uri,\r\n                    supply: 1,\r\n                    lazyMint: true,\r\n                    price: parseFloat(price),\r\n                    creators: [\r\n                        {\r\n                            account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                            value: 10000,\r\n                        },\r\n                    ],\r\n                    royalties: [{\r\n                        account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                        value: parseFloat(royalty) * 100,\r\n                    }],\r\n                    currency: {\r\n                        \"@type\": \"ETH\",\r\n                    },\r\n                });\r\n\r\n                console.log('EVERYTHING COMPLETED');\r\n                sendMessage(JSON.stringify({\r\n                    type: 'MINTED_AND_PUT_ON_SALE',\r\n                    message: {\r\n                        link: `https://rarible.com/token/0xc9154424B823b10579895cCBE442d41b9Abd96Ed:${tokenId?.tokenId}`,\r\n                    },\r\n                }))\r\n            }\r\n        }\r\n    );\r\n\r\n    await connect(connector)\r\n\r\n};\r\n\r\nconst connect = async (connector: any) => {\r\n    const option = (await connector.getOptions())[0];\r\n    console.log(option);\r\n    await connector.connect(option);\r\n};\r\n\r\n\r\nconst getIPFS = async (ipfsUri: string, tokenId: any, name: string, description: string) => {\r\n    const obj = {\r\n        name: name,\r\n        description: description,\r\n        image: ipfsUri,\r\n        external_url: `https://rarible.com/token/0xc9154424B823b10579895cCBE442d41b9Abd96Ed:${tokenId}`,\r\n        attributes: []\r\n    };\r\n\r\n    const form = new FormData();\r\n\r\n    const fileName = 'test.json';\r\n\r\n    form.append('file', new Blob([JSON.stringify(obj)], {type: 'text/json'}), fileName);\r\n\r\n\r\n    const response = await axios({\r\n        method: \"post\",\r\n        url: \"https://pinata.rarible.com/upload\",\r\n        data: form,\r\n        headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n    });\r\n    console.log('ended json upload to ipfs ')\r\n\r\n    return `ipfs://ipfs/${response.data.IpfsHash}`\r\n\r\n}\r\n\r\n// @ts-ignore\r\nwindow.mintAndSell = mintAndSell;\r\n// @ts-ignore\r\nwindow.connectWallet = connectWallet;\r\n// @ts-ignore\r\nwindow.disconnectWallet = disconnectWallet;\r\n\r\nwindow.onerror = function myErrorHandler(errorMsg, url, lineNumber) {\r\n    console.log(errorMsg, url, lineNumber);\r\n    defaultSendMessage(JSON.stringify({\r\n        type: 'ERROR',\r\n        message: null,\r\n    }))\r\n    return false;\r\n}\r\n\r\nexport default {\r\n    mintAndSell,\r\n};\r\n","import React from \"react\";\r\n\r\nexport class Web3States extends React.Component<{}, {\r\n    web3: any,\r\n    ethereum: any,\r\n    web3Provider: any,\r\n}> {\r\n    private timerID: NodeJS.Timer;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            // @ts-ignore\r\n            web3: window.web3,\r\n            // @ts-ignore\r\n            ethereum: window.ethereum,\r\n            // @ts-ignore\r\n            web3Provider: window.web3?.currentProvider,\r\n        };\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            // @ts-ignore\r\n            web3: window.web3,\r\n            // @ts-ignore\r\n            ethereum: window.ethereum,\r\n            // @ts-ignore\r\n            web3Provider: window.web3?.currentProvider,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Web3 exists: {!!this.state.web3 ? 'true' : 'false'}</h3>\r\n                <h3>Ethereum exists: {!!this.state.ethereum ? 'true' : 'false'}</h3>\r\n                <h3>Web3 provider exists : {!!this.state.web3Provider ? 'true' : 'false'}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport nft from \"./nft\";\r\nimport {Web3States} from \"./Web3States\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <Web3States/>\r\n        <button onClick={() => nft.mintAndSell()}> rarible</button>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}