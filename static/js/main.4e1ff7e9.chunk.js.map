{"version":3,"sources":["logo.svg","nft.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["raribleTest","a","console","log","hasBeenConnected","injected","mapEthereumWallet","InjectedWeb3ConnectionProvider","walletConnect","WalletConnectConnectionProvider","bridge","clientMeta","description","url","icons","name","rpc","chainId","qrcode","qrcodeModal","QRCodeModal","qrcodeModalOptions","mobileLinks","signingMethods","connector","Connector","create","add","connection","subscribe","con","status","collection","sdk","createRaribleSdk","wallet","window","nft","generateTokenId","toContractAddress","minter","toUnionAddress","address","tokenId","mintRequest","collectionId","mintAndSell","mintResponse","getIPFS","uri","submit","supply","lazyMint","price","creators","account","value","royalties","currency","response","getOptions","option","connect","obj","form","FormData","append","Blob","JSON","stringify","type","axios","method","data","headers","IpfsHash","openSeaTest","provider","WalletConnectProvider","enable","OpenSeaPort","networkName","Network","Main","App","className","src","logo","alt","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4e1ff7e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Connector, InjectedWeb3ConnectionProvider} from \"@rarible/connector\";\r\nimport {WalletConnectConnectionProvider} from \"@rarible/connector-walletconnect\";\r\nimport {mapEthereumWallet} from '@rarible/connector-helper';\r\nimport {createRaribleSdk} from '@rarible/sdk';\r\nimport {toContractAddress} from \"@rarible/types\";\r\nimport {toUnionAddress} from \"@rarible/types/build/union-address\";\r\nimport {PrepareMintRequest} from \"@rarible/sdk/build/types/nft/mint/prepare-mint-request.type\";\r\nimport WalletConnect from \"@walletconnect/client\";\r\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nimport axios from \"axios\";\r\nimport { OpenSeaPort, Network } from 'opensea-js'\r\n\r\n\r\nconst raribleTest = async (sendMessage: Function = () => {console.log('kek param')}) => {\r\n    let hasBeenConnected = false;\r\n    console.log('darova')\r\n    const ethereumRpcMap: Record<number, string> = {\r\n        1: \"https://node-mainnet.rarible.com\",\r\n        3: \"https://node-ropsten.rarible.com\",\r\n        4: \"https://node-rinkeby.rarible.com\",\r\n        17: \"https://node-e2e.rarible.com\",\r\n    }\r\n\r\n    const injected = mapEthereumWallet(new InjectedWeb3ConnectionProvider())\r\n    const walletConnect = mapEthereumWallet(new WalletConnectConnectionProvider({\r\n\r\n        bridge: \"https://bridge.walletconnect.org\",\r\n        clientMeta: {\r\n            description: \"WalletConnect NodeJS Client\",\r\n            url: \"https://nodejs.org/en/\",\r\n            icons: [\"https://nodejs.org/static/images/logo.svg\"],\r\n            name: \"WalletConnect\",\r\n        },\r\n        rpc: {\r\n            1: \"https://node-mainnet.rarible.com\",\r\n            3: \"https://node-ropsten.rarible.com\",\r\n            4: \"https://node-rinkeby.rarible.com\",\r\n            137: \"https://matic-mainnet.chainstacklabs.com\",\r\n        },\r\n        chainId: 1,\r\n        qrcode: true,\r\n        qrcodeModal:QRCodeModal,\r\n        // qrcodeModal: {\r\n        //     async open(uri: string, cb: any, opts?: any) {\r\n        //         sendMessage(JSON.stringify({type: 'LAUNCH', message: uri}))\r\n        //\r\n        //         console.log(uri)\r\n        //         // window.location.replace(uri);\r\n        //\r\n        //         // await cb()\r\n        //     },\r\n        //     async close() {\r\n        //         console.log('closed method was called ')\r\n        //         // const connection = await walletConnect.getConnection();\r\n        //         // const sdk = createRaribleSdk((await walletConnect.getConnection())., \"staging\");\r\n        //         // const isConnected = await walletConnect.isConnected()\r\n        //         return 'darova'\r\n        //     }\r\n        // },\r\n        qrcodeModalOptions: {mobileLinks: [\"metamask\",\"trust\"]},\r\n        signingMethods: [\r\n            'eth_signTypedData_v4',\r\n\r\n            'eth_sendTransaction',\r\n            'eth_signTransaction',\r\n            'eth_sign',\r\n            'eth_signTypedData',\r\n\r\n            'eth_signTypedData_v1',\r\n            'eth_signTypedData_v2',\r\n            'eth_signTypedData_v3',\r\n            'eth_signTypedData_v4',\r\n            'personal_sign',\r\n        ],\r\n\r\n        // qrcodeModalOptions: {\r\n        //     mobileLinks: ['lol']\r\n        // }\r\n\r\n    }))\r\n\r\n        const connector = Connector\r\n        .create(injected)\r\n        .add(walletConnect)\r\n\r\n\r\n    connector.connection.subscribe(async (con) => {\r\n            console.log(\"connection: \" + con.status);\r\n            if (con.status === \"connected\" && !hasBeenConnected) {\r\n                hasBeenConnected = true;\r\n                console.log('ccccccccccccccccon')\r\n                // prod\r\n                const collection = 'ETHEREUM:0xc9154424B823b10579895cCBE442d41b9Abd96Ed';\r\n                // staging\r\n                // const collection = 'ETHEREUM:0x6ede7f3c26975aad32a475e1021d8f6f39c89d82';\r\n                // dev\r\n                // const collection = 'ETHEREUM:0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05';\r\n                // @ts-ignore\r\n                const sdk = createRaribleSdk(con.connection.wallet, \"prod\");\r\n                // @ts-ignore\r\n                window.con = con;\r\n                // @ts-ignore\r\n                window.sdk = sdk;\r\n                // @ts-ignore\r\n                // window.ethereum = sdk.wallet.ethereum.config.web3._provider;\r\n                // // @ts-ignore\r\n                // window.web3 = sdk.wallet.ethereum.config.web3\r\n                const tokenId = await sdk.nft.generateTokenId({\r\n                    collection: toContractAddress(collection),\r\n                    minter: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                })\r\n                // window.location.replace('https://metamask.app.link/dapp/l-u-k-o-s.github.io/nft-react/index.html');\r\n                console.log(tokenId);\r\n                const mintRequest: PrepareMintRequest = {\r\n                    collectionId: toContractAddress(collection),\r\n                    tokenId,\r\n                };\r\n                const mintResponse = await sdk.nft.mintAndSell(mintRequest);\r\n                const uri = await getIPFS(tokenId?.tokenId);\r\n                console.log(uri);\r\n                // window.location.replace('https://metamask.app.link/dapp/l-u-k-o-s.github.io/nft-react/index.html');\r\n\r\n                const response = await mintResponse.submit({\r\n                    uri,\r\n                    supply: 1,\r\n                    lazyMint: true,\r\n                    price: 1,\r\n                    creators: [\r\n                        {\r\n                            account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                            value: 10000,\r\n                        },\r\n                    ],\r\n                    royalties: [{\r\n                        account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                        value: 1000,\r\n                    }],\r\n                    currency: {\r\n                        \"@type\": \"ETH\",\r\n                    },\r\n                })\r\n\r\n                console.log(response);\r\n            }\r\n        }\r\n    )\r\n\r\n    const option = (await connector.getOptions())[0]; // get list of available option\r\n    console.log(option);\r\n    const tmp = await connector.connect(option);\r\n\r\n    console.log('dkdkjd')\r\n}\r\n\r\nconst getIPFS = async (tokenId: any) => {\r\n    const obj = {\r\n        \"name\": \"112\",\r\n        \"description\": \"123\",\r\n        \"image\": \"ipfs://ipfs/QmdFFGs19hry4NjWMgZj2XTxGFEhywRsvD41bpR68uHCCq/image.png\",\r\n        \"external_url\": `https://rarible.com/token/0xc9154424B823b10579895cCBE442d41b9Abd96Ed:${tokenId}`,\r\n        \"attributes\": []\r\n    };\r\n\r\n    const form = new FormData();\r\n\r\n    const fileName = 'test.json';\r\n\r\n    form.append('file', new Blob([JSON.stringify(obj)], {type: 'text/json'} ), fileName);\r\n\r\n\r\n    const response = await axios({\r\n        method: \"post\",\r\n        url: \"https://pinata.rarible.com/upload\",\r\n        data: form,\r\n        headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n    });\r\n    console.log(response);\r\n    console.log(2432452352345)\r\n\r\n    return `ipfs://ipfs/${response.data.IpfsHash}`\r\n\r\n}\r\n\r\nconst openSeaTest = async () => {\r\n\r\n//  Create WalletConnect Provider\r\n    const provider = new WalletConnectProvider({\r\n        rpc: {\r\n            1: \"https://node-mainnet.rarible.com\",\r\n        },\r\n        // qrcodeModal: {\r\n        //     async open(uri: string, cb: any, opts?: any) {\r\n        //         console.log(uri)\r\n        //         window.location.replace(uri);\r\n        //\r\n        //         // await cb()\r\n        //     },\r\n        //     async close() {\r\n        //         console.log('closed method was called ')\r\n        //         // const connection = await walletConnect.getConnection();\r\n        //         // const sdk = createRaribleSdk((await walletConnect.getConnection())., \"staging\");\r\n        //         // const isConnected = await walletConnect.isConnected()\r\n        //         return 'darova'\r\n        //     }\r\n        // },\r\n    });\r\n\r\n//  Enable session (triggers QR Code modal)\r\n    await provider.enable();\r\n\r\n    // @ts-ignore\r\n    const seaport = new OpenSeaPort(provider, {\r\n        networkName: Network.Main,\r\n    })\r\n\r\n\r\n};\r\n\r\n// @ts-ignore\r\nwindow.raribleTest = raribleTest;\r\n\r\nexport default {\r\n    raribleTest,\r\n    openSeaTest,\r\n};\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport nft from \"./nft\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <button onClick={() => nft.raribleTest()}> rarible</button>\r\n        <button onClick={() => nft.openSeaTest()}> open sea</button>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}