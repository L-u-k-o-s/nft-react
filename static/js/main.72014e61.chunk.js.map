{"version":3,"sources":["logo.svg","nft.ts","Web3States.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["raribleTest","a","ipfsUri","name","description","price","sendMessage","console","log","hasBeenConnected","injected","mapEthereumWallet","InjectedWeb3ConnectionProvider","walletConnect","WalletConnectConnectionProvider","bridge","clientMeta","url","icons","rpc","chainId","qrcode","qrcodeModal","open","uri","cb","opts","JSON","stringify","type","message","close","qrcodeModalOptions","mobileLinks","signingMethods","connector","Connector","create","add","connection","subscribe","con","status","collection","sdk","createRaribleSdk","wallet","nft","generateTokenId","toContractAddress","minter","toUnionAddress","address","tokenId","mintRequest","collectionId","mintAndSell","mintResponse","getIPFS","parseFloat","submit","supply","lazyMint","creators","account","value","royalties","currency","response","getOptions","option","connect","obj","image","external_url","attributes","form","FormData","append","Blob","axios","method","data","headers","IpfsHash","window","Web3States","props","timerID","state","web3","ethereum","web3Provider","currentProvider","setInterval","tick","this","clearInterval","setState","React","Component","App","className","src","logo","alt","onClick","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.72014e61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {\r\n    Connector,\r\n    IConnectorStateProvider,\r\n    InjectedWeb3ConnectionProvider\r\n} from \"@rarible/connector\";\r\nimport {WalletConnectConnectionProvider} from \"@rarible/connector-walletconnect\";\r\nimport {mapEthereumWallet} from '@rarible/connector-helper';\r\nimport {createRaribleSdk} from '@rarible/sdk';\r\nimport {toContractAddress} from \"@rarible/types\";\r\nimport {toUnionAddress} from \"@rarible/types/build/union-address\";\r\nimport {PrepareMintRequest} from \"@rarible/sdk/build/types/nft/mint/prepare-mint-request.type\";\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\n\r\n// import {CustomProvider} from \"./CustomProvider\";\r\n\r\n\r\nconst raribleTest = async (ipfsUri: string = '', name: string = 'Default name', description: string = 'Default description', price: string = '1', sendMessage: Function = () => {\r\n    console.log('default console log')\r\n}) => {\r\n    let hasBeenConnected = false;\r\n    console.log('darova')\r\n    const ethereumRpcMap: Record<number, string> = {\r\n        1: \"https://node-mainnet.rarible.com\",\r\n        3: \"https://node-ropsten.rarible.com\",\r\n        4: \"https://node-rinkeby.rarible.com\",\r\n        17: \"https://node-e2e.rarible.com\",\r\n    }\r\n\r\n    const injected = mapEthereumWallet(new InjectedWeb3ConnectionProvider())\r\n\r\n    const walletConnect = mapEthereumWallet(new WalletConnectConnectionProvider({\r\n\r\n        bridge: \"https://bridge.walletconnect.org\",\r\n        clientMeta: {\r\n            description: \"WalletConnect NodeJS Client\",\r\n            url: \"https://nodejs.org/en/\",\r\n            icons: [\"https://nodejs.org/static/images/logo.svg\"],\r\n            name: \"WalletConnect\",\r\n        },\r\n        rpc: {\r\n            // 1: \"https://node-mainnet.rarible.com\",\r\n            1: \"https://mainnet-nethermind.blockscout.com/\",\r\n            3: \"https://node-ropsten.rarible.com\",\r\n            4: \"https://node-rinkeby.rarible.com\",\r\n            137: \"https://matic-mainnet.chainstacklabs.com\",\r\n        },\r\n        chainId: 1,\r\n        qrcode: true,\r\n        // qrcodeModal:QRCodeModal,\r\n        qrcodeModal: {\r\n            async open(uri: string, cb: any, opts?: any) {\r\n                sendMessage(JSON.stringify({type: 'LAUNCH', message: uri}))\r\n                console.log(uri)\r\n            },\r\n            async close() {\r\n                console.log('closed method was called ')\r\n                return 'darova'\r\n            }\r\n        },\r\n        qrcodeModalOptions: {mobileLinks: [\"metamask\", \"trust\"]},\r\n        signingMethods: [\r\n            'eth_signTypedData_v4',\r\n\r\n            'eth_sendTransaction',\r\n            'eth_signTransaction',\r\n            'eth_sign',\r\n            'eth_signTypedData',\r\n\r\n            'eth_signTypedData_v1',\r\n            'eth_signTypedData_v2',\r\n            'eth_signTypedData_v3',\r\n            'eth_signTypedData_v4',\r\n            'personal_sign',\r\n        ],\r\n    }))\r\n\r\n    // const state: IConnectorStateProvider = {\r\n    //     async getValue(): Promise<string | undefined> {\r\n    //         const value = localStorage.getItem(\"saved_provider\")\r\n    //         return value ? value : undefined\r\n    //     },\r\n    //     async setValue(value: string | undefined): Promise<void> {\r\n    //         localStorage.setItem(\"saved_provider\", value || \"\")\r\n    //     },\r\n    // }\r\n\r\n\r\n    const connector = Connector\r\n        // .create(injected, state)\r\n        .create(injected)\r\n        .add(walletConnect)\r\n\r\n\r\n    connector.connection.subscribe(async (con) => {\r\n            console.log(\"connection: \" + con.status);\r\n            if (con.status === \"connected\" && !hasBeenConnected) {\r\n                hasBeenConnected = true;\r\n                console.log('connection logic started')\r\n                // prod\r\n                const collection = 'ETHEREUM:0xc9154424B823b10579895cCBE442d41b9Abd96Ed';\r\n                // staging\r\n                // const collection = 'ETHEREUM:0x6ede7f3c26975aad32a475e1021d8f6f39c89d82';\r\n                // dev\r\n                // const collection = 'ETHEREUM:0xB0EA149212Eb707a1E5FC1D2d3fD318a8d94cf05';\r\n                // @ts-ignore\r\n                const sdk = createRaribleSdk(con.connection.wallet, \"prod\");\r\n                const tokenId = await sdk.nft.generateTokenId({\r\n                    collection: toContractAddress(collection),\r\n                    minter: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                })\r\n                console.log(tokenId);\r\n                const mintRequest: PrepareMintRequest = {\r\n                    // @ts-ignore\r\n                    collectionId: toContractAddress(collection),\r\n                    tokenId,\r\n                };\r\n                const mintResponse = await sdk.nft.mintAndSell(mintRequest);\r\n                const uri = await getIPFS(ipfsUri, tokenId?.tokenId, name, description);\r\n                sendMessage(JSON.stringify({type: 'LAUNCH', message: null}))\r\n                console.log(uri);\r\n                console.log(`the price is ${parseFloat(price)}`)\r\n                const response = await mintResponse.submit({\r\n                    uri,\r\n                    supply: 1,\r\n                    lazyMint: true,\r\n                    price: 1,\r\n                    // price: parseFloat(price),\r\n                    creators: [\r\n                        {\r\n                            account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                            value: 10000,\r\n                        },\r\n                    ],\r\n                    royalties: [{\r\n                        account: toUnionAddress(`ETHEREUM:${con.connection.address}`),\r\n                        value: 1000,\r\n                    }],\r\n                    // currency: 'ERC20'\r\n                    currency: {\r\n                        \"@type\": \"ETH\",\r\n                    },\r\n                })\r\n\r\n                console.log(response);\r\n            }\r\n        }\r\n    )\r\n\r\n    const option = (await connector.getOptions())[0]; // get list of available option\r\n    console.log(option);\r\n    const tmp = await connector.connect(option);\r\n\r\n    console.log('dkdkjd')\r\n}\r\n\r\nconst getIPFS = async (ipfsUri: string, tokenId: any, name: string, description: string) => {\r\n    const obj = {\r\n        name: name,\r\n        description: description,\r\n        image: ipfsUri,\r\n        external_url: `https://rarible.com/token/0xc9154424B823b10579895cCBE442d41b9Abd96Ed:${tokenId}`,\r\n        attributes: []\r\n    };\r\n\r\n    const form = new FormData();\r\n\r\n    const fileName = 'test.json';\r\n\r\n    form.append('file', new Blob([JSON.stringify(obj)], {type: 'text/json'}), fileName);\r\n\r\n\r\n    const response = await axios({\r\n        method: \"post\",\r\n        url: \"https://pinata.rarible.com/upload\",\r\n        data: form,\r\n        headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n    });\r\n    console.log('ended json upload on ipfs ')\r\n\r\n    return `ipfs://ipfs/${response.data.IpfsHash}`\r\n\r\n}\r\n\r\n// @ts-ignore\r\nwindow.raribleTest = raribleTest;\r\n\r\nexport default {\r\n    raribleTest,\r\n};\r\n","import React from \"react\";\r\n\r\nexport class Web3States extends React.Component<{}, {\r\n    web3: any,\r\n    ethereum: any,\r\n    web3Provider: any,\r\n}> {\r\n    private timerID: NodeJS.Timer;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            // @ts-ignore\r\n            web3: window.web3,\r\n            // @ts-ignore\r\n            ethereum: window.ethereum,\r\n            // @ts-ignore\r\n            web3Provider: window.web3?.currentProvider,\r\n        };\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({\r\n            // @ts-ignore\r\n            web3: window.web3,\r\n            // @ts-ignore\r\n            ethereum: window.ethereum,\r\n            // @ts-ignore\r\n            web3Provider: window.web3?.currentProvider,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Web3 exists: {!!this.state.web3 ? 'true' : 'false'}</h3>\r\n                <h3>Ethereum exists: {!!this.state.ethereum ? 'true' : 'false'}</h3>\r\n                <h3>Web3 provider exists : {!!this.state.web3Provider ? 'true' : 'false'}</h3>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport nft from \"./nft\";\r\nimport {Web3States} from \"./Web3States\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <Web3States/>\r\n        <button onClick={() => nft.raribleTest()}> rarible</button>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}